(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('apollo-link'), require('graphql/language/printer'), require('apollo-angular-link-http-common')) :
    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common/http', 'apollo-link', 'graphql/language/printer', 'apollo-angular-link-http-common'], factory) :
    (factory((global.apollo = global.apollo || {}, global.apollo.link = global.apollo.link || {}, global.apollo.link.http = {}),global.ng.core,global.ng.common.http,global.apolloLink.core,null,global.apollo.link.httpCommon));
}(this, (function (exports,core,http,apolloLink,printer,apolloAngularLinkHttpCommon) { 'use strict';

    var __extends = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    // XXX find a better name for it
    var HttpLinkHandler = /** @class */ (function (_super) {
        __extends(HttpLinkHandler, _super);
        function HttpLinkHandler(httpClient, options) {
            var _this = _super.call(this) || this;
            _this.httpClient = httpClient;
            _this.options = options;
            _this.requester = function (operation) {
                return new apolloLink.Observable(function (observer) {
                    var context = operation.getContext();
                    // decides which value to pick, Context, Options or to just use the default
                    var pick = function (key, init) {
                        return apolloAngularLinkHttpCommon.prioritize(context[key], _this.options[key], init);
                    };
                    var includeQuery = pick('includeQuery', true);
                    var includeExtensions = pick('includeExtensions', false);
                    var method = pick('method', 'POST');
                    var url = pick('uri', 'graphql');
                    var withCredentials = pick('withCredentials');
                    var req = {
                        method: method,
                        url: url,
                        body: {
                            operationName: operation.operationName,
                            variables: operation.variables,
                        },
                        options: {
                            withCredentials: withCredentials,
                            headers: _this.options.headers,
                        },
                    };
                    if (includeExtensions) {
                        req.body.extensions = operation.extensions;
                    }
                    if (includeQuery) {
                        req.body.query = printer.print(operation.query);
                    }
                    if (context.headers) {
                        req.options.headers = apolloAngularLinkHttpCommon.mergeHeaders(req.options.headers, context.headers);
                    }
                    var sub = apolloAngularLinkHttpCommon.fetch(req, _this.httpClient).subscribe({
                        next: function (response) {
                            operation.setContext({ response: response });
                            observer.next(response.body);
                        },
                        error: function (err) { return observer.error(err); },
                        complete: function () { return observer.complete(); },
                    });
                    return function () {
                        if (!sub.closed) {
                            sub.unsubscribe();
                        }
                    };
                });
            };
            return _this;
        }
        HttpLinkHandler.prototype.request = function (op) {
            return this.requester(op);
        };
        return HttpLinkHandler;
    }(apolloLink.ApolloLink));
    var HttpLink = /** @class */ (function () {
        function HttpLink(httpClient) {
            this.httpClient = httpClient;
        }
        HttpLink.prototype.create = function (options) {
            return new HttpLinkHandler(this.httpClient, options);
        };
        HttpLink.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        HttpLink.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        return HttpLink;
    }());

    var PROVIDERS = [HttpLink];
    var HttpLinkModule = /** @class */ (function () {
        function HttpLinkModule() {
        }
        HttpLinkModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: PROVIDERS,
                    },] },
        ];
        return HttpLinkModule;
    }());

    exports.HttpLink = HttpLink;
    exports.HttpLinkHandler = HttpLinkHandler;
    exports.HttpLinkModule = HttpLinkModule;
    exports.PROVIDERS = PROVIDERS;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=bundle.umd.js.map
